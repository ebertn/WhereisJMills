{
  "name": "libsodium-wrappers",
  "version": "0.5.2",
  "description": "The Sodium cryptographic library compiled to pure JavaScript (wrappers)",
  "main": "dist/modules/libsodium-wrappers.js",
  "files": [
    "dist/modules/libsodium-wrappers.js",
    "package.json"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/jedisct1/libsodium.js.git"
  },
  "dependencies": {
    "libsodium": "0.5.2"
  },
  "keywords": [
    "crypto",
    "sodium",
    "libsodium",
    "nacl",
    "chacha20",
    "poly1305",
    "curve25519",
    "ed25519",
    "blake2",
    "siphash",
    "argon2",
    "ecc"
  ],
  "author": {
    "name": "Ahmad Ben Mrad",
    "url": "@BatikhSouri"
  },
  "contributors": [
    {
      "name": "Frank Denis",
      "url": "@jedisct1"
    }
  ],
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/jedisct1/libsodium.js/issues"
  },
  "homepage": "https://github.com/jedisct1/libsodium.js",
  "readme": "[![Make a donation to support this project](https://img.shields.io/badge/donate-PayPal-green.svg?style=flat)](https://www.libsodium.org/donate)\n\n# libsodium.js\n\n## Overview\n\nThe [sodium](https://github.com/jedisct1/libsodium) crypto library compiled\nto pure JavaScript using [Emscripten](https://github.com/kripken/emscripten),\nwith automatically generated wrappers to make it easy to use in web\napplications.\n\nThe complete library weights 115 Kb (minified, gzipped) and can run in\na web browser as well as server-side.\n\n### Compatibility\n\nSupported browsers/JS engines:\n\n* Chrome >= 16\n* Edge >= 0.11\n* Firefox >= 21\n* Internet Explorer >= 11\n* Mobile Safari on iOS >= 8.0 (older versions produce incorrect results)\n* NodeJS\n* Opera >= 15\n* Safari >= 6 (older versions produce incorrect results)\n\n## Installation\n\nReady-to-use files based on libsodium 1.0.13 can be directly copied to your\nproject.\n\n### Usage with global definitions, for web browsers\n\nUse [Bower](http://bower.io/):\n```bash\n$ bower install libsodium.js\n```\nor directly include a copy of the\n[sodium.min.js](https://github.com/jedisct1/libsodium.js/tree/master/dist/browsers/combined)\nfile.\n\nAlternatively, for better performance and to avoid including a local copy,\n[libsodium.js is available on cdnjs](https://cdnjs.com/libraries/libsodium-wrappers).\n\nIncluding the `sodium.min.js` file will add a `sodium` object to the\nglobal namespace.\n\nIf a `sodium` object is already present in the global namespace, and\nthe `sodium.onload` function is defined, this function will be called\nright after the library has been loaded and initialized.\n\n```html\n<script>\nwindow.sodium = { onload: function(sodium) {\n  alert(sodium.to_hex(sodium.crypto_generichash(64, 'test')));\n}};\n</script>\n...\n<script src=\"sodium.js\" async defer></script>\n```\n\nAs an alternative, use a module loader or Browserify as described below.\n\n### Usage with CommonJS/AMD/ES6 import\n\nCopy the `.js` files for [libsodium and libsodium-wrappers](https://github.com/jedisct1/libsodium.js/tree/master/dist/modules)\nto your project and load the `libsodium-wrappers` module.\n\nAlternatively, use [yarn](https://yarnpkg.com/). The Yarn package is\ncalled `libsodium-wrappers` and includes a dependency on the raw\n`libsodium` module.\n\n```shell\n$ yarn add libsodium-wrappers\n```\n\n```javascript\nvar sodium = require('libsodium-wrappers');\nconsole.log(sodium.to_hex(sodium.crypto_generichash(64, 'test')));\n```\n\n## List of wrapped algorithms and functions:\n\n* [`crypto_aead`](https://download.libsodium.org/doc/secret-key_cryptography/aead.html) (XChaCha20-Poly1305)\n* [`crypto_auth`](https://download.libsodium.org/doc/secret-key_cryptography/secret-key_authentication.html) (HMAC-SHA-512-256)\n* [`crypto_box`](https://doc.libsodium.org/public-key_cryptography/authenticated_encryption.html) (X25519, XSalsa20)\n* [`crypto_box_seal`](https://download.libsodium.org/libsodium/content/public-key_cryptography/sealed_boxes.html) (X25519, XSalsa20)\n* [`crypto_generichash`](https://download.libsodium.org/libsodium/content/hashing/generic_hashing.html) (BLAKE2b)\n* [`crypto_hash`](https://download.libsodium.org/libsodium/content/advanced/sha-2_hash_function.html) (SHA-512-256)\n* [`crypto_kdf`](https://download.libsodium.org/doc/key_derivation/) (BLAKE2b)\n* [`crypto_kx`](https://download.libsodium.org/doc/key_exchange/) (X25519, BLAKE2b)\n* [`crypto_onetimeauth`](https://download.libsodium.org/doc/advanced/poly1305.html) (Poly1305)\n* [`crypto_pwhash`](https://download.libsodium.org/libsodium/content/password_hashing/) (Argon2, Scrypt)\n* [`crypto_scalarmult`](https://download.libsodium.org/libsodium/content/advanced/scalar_multiplication.html) (X25519)\n* [`crypto_secretbox`](https://download.libsodium.org/libsodium/content/secret-key_cryptography/authenticated_encryption.html) (Salsa20-Poly1305)\n* [`crypto_shorthash`](https://download.libsodium.org/libsodium/content/hashing/short-input_hashing.html) (SipHash, SipHash-128)\n* [`crypto_sign`](https://download.libsodium.org/libsodium/content/public-key_cryptography/public-key_signatures.html) (Ed25519, Ed25519ph)\n* [`crypto_stream`](https://download.libsodium.org/doc/advanced/stream_ciphers.html) (Salsa20, XSalsa20, ChaCha20, XChaCha20)\n* [Ed25519->Curve25519 conversion](https://download.libsodium.org/libsodium/content/advanced/ed25519-curve25519.html)\n* [`randombytes`](https://download.libsodium.org/libsodium/content/generating_random_data/)\n\n## Additional helpers\n\n* `from_hex()`, `to_hex()`\n* `from_string()`, `to_string()`\n* `memcmp()` (constant-time check for equality, returns `true` or `false`)\n* `compare() (constant-time comparison. Values must have the same\nsize. Returns `-1`, `0` or `1`)\n* `memzero()` (applies to `Uint8Array` objects)\n* `increment()` (increments an arbitrary-long number stored as a\nlittle-endian `Uint8Array` - typically to increment nonces)\n* `add()` (adds two arbitrary-long numbers stored as little-endian\n`Uint8Array` vectors)\n* `is_zero()` (constant-time, checks `Uint8Array` objects for all zeros)\n\n## API\n\nThe API exposed by the wrappers is identical to the one of the C\nlibrary, except that buffer lengths never need to be explicitly given.\n\nBinary input buffers should be `Uint8Array` objects. However, if a string\nis given instead, the wrappers will automatically convert the string\nto an array containing a UTF-8 representation of the string.\n\nExample:\n```javascript\nvar key = sodium.randombytes_buf(sodium.crypto_shorthash_KEYBYTES),\n    hash1 = sodium.crypto_shorthash(new Uint8Array([1, 2, 3, 4]), key),\n    hash2 = sodium.crypto_shorthash('test', key);\n```\n\nIf the output is a unique binary buffer, it is returned as a\n`Uint8Array` object.\n\nHowever, an extra parameter can be given to all wrapped functions, in\norder to specify what format the output should be in. Valid options\nare `uint8array' (default), 'text' and 'hex'.\n\nExample (shorthash):\n\n```javascript\nvar key = sodium.randombytes_buf(sodium.crypto_shorthash_KEYBYTES),\n    hash_hex = sodium.crypto_shorthash('test', key, 'hex');\n```\n\nExample (secretbox):\n\n```javascript\n// Load your secret key from a safe place and reuse it across multiple\n// secretbox calls. (Obviously don't use this example key for anything\n// real.)\n//\nvar secret = Buffer.from('724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed', 'hex');\n\n// Given a message as a string, return a Buffer containing the\n// nonce (in the first 24 bytes) and the encrypted content.\nvar encrypt = function(message) {\n    // You must use a different nonce for each message you encrypt.\n    var nonce = Buffer.from(sodium.randombytes_buf(sodium.crypto_box_NONCEBYTES));\n    var buf = Buffer.from(message);\n    return Buffer.concat([nonce, Buffer.from(sodium.crypto_secretbox_easy(buf, nonce, secret))]);\n},\n\n// Decrypt takes a Buffer and returns the decrypted message as plain text.\nvar decrypt = function(encryptedBuffer) {\n    var nonce = encryptedBuffer.slice(0, sodium.crypto_box_NONCEBYTES);\n    var encryptedMessage = encryptedBuffer.slice(sodium.crypto_box_NONCEBYTES);\n    return sodium.crypto_secretbox_open_easy(encryptedMessage, nonce, secret, 'text');\n}\n```\n\nIn addition, the `from_hex`, `to_hex`, `from_string`, and `to_string`\nfunctions are available to explicitly convert hexadecimal, and\narbitrary string representations from/to `Uint8Array` objects.\n\nFunctions returning more than one output buffer are returning them as\nan object. For example, the `sodium.crypto_box_keypair()` function\nreturns the following object:\n```javascript\n{ keyType: 'curve25519', privateKey: (Uint8Array), publicKey: (Uint8Array) }\n```\n\n### Standard vs Sumo version\n\nThe standard version (in the `dist/browsers` and `dist/modules`\ndirectories) contains the high-level functions, and is the recommended\none for most projects.\n\nAlternatively, the \"sumo\" version, available in the\n`dist/browsers-sumo` and `dist/modules-sumo` directories contains all\nthe symbols from the original library. This includes undocumented,\nuntested, deprecated, low-level and easy to misuse functions.\n\nThe `crypto_pwhash_*` function set is also only included in the Sumo\nversion. The high amount of heap memory (allocated after loading)\nrequired by these functions may not be desirable when they are not\nbeing used.\n\nThe sumo version is slightly larger than the standard version, and\nshould be used only if you really need the extra symbols it provides.\n\n### Compilation\n\nIf you want to compile the files yourself, the following dependencies\nneed to be installed on your system:\n\n* autoconf\n* automake\n* emscripten\n* git\n* nodejs\n* libtool\n* make\n* zopfli (`yarn global add node-zopfli`)\n* uglifyjs (`yarn global add uglify-js`)\n\nRunning `make` will clone libsodium, build it, test it, build the\nwrapper, and create the modules and minified distribution files.\n\n### Custom build\n\nThe build available in this repository does not contain all the\nfunctions available in the original libsodium library.\n\nProviding that you have all the build dependencies installed, here is\nhow you can build libsodium.js to include the functions you need :\n\n```shell\ngit clone https://github.com/jedisct1/libsodium.js\ncd libsodium.js\n\n# Get the original C version of libsodium and configure it\nmake libsodium/configure\n\n# Modify the emscripten.sh\n# Specifically, add the name of the missing functions and constants in the \"EXPORTED_FUNCTIONS\" array.\n# Ensure that the name begins with an underscore and that it is between double quotes.\nnano libsodium/dist-build/emscripten.sh\n\n# Build libsodium, and then libsodium.js with your chosen functions\nmake\n```\n\n__NOTE:__ for each of the functions/constants you add, make sure that\nthe corresponding symbol files exist in the `wrapper/symbols` folder\nand that the constants are listed in the `wrapper/constants.json`\nfile.\n\n## Authors\n\nBuilt by Ahmad Ben Mrad and Frank Denis.\n\n## License\n\nThis wrapper is distributed under the\n[ISC License](https://en.wikipedia.org/wiki/ISC_license).\n",
  "readmeFilename": "README.md",
  "_id": "libsodium-wrappers@0.5.2",
  "dist": {
    "shasum": "1fcd0d4f8cafa83c8b8d479adecbcc2a9bc5b65f"
  },
  "_from": "libsodium-wrappers@^0.5.1",
  "_resolved": "https://registry.npmjs.org/libsodium-wrappers/-/libsodium-wrappers-0.5.2.tgz"
}
