{
  "name": "node-opus",
  "description": "NodeJS native binding to OPUS",
  "version": "0.2.6",
  "author": {
    "name": "Mikko Rantanen",
    "email": "jubjub@jubjubnest.net"
  },
  "homepage": "https://github.com/Rantanen/node-opus",
  "bugs": {
    "url": "https://github.com/Rantanen/node-opus/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "http://github.com/Rantanen/node-opus.git"
  },
  "//": "Platform limitations is due to lack of config.h files. See README.md for more information.",
  "os": [
    "linux",
    "darwin",
    "win32",
    "freebsd"
  ],
  "cpu": [
    "x64",
    "arm",
    "ia32"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "bindings": "~1.2.1",
    "nan": "^2.3.2",
    "ogg-packet": "^1.0.0"
  },
  "optionalDependencies": {
    "ogg-packet": "^1.0.0"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "node-opus\n=========\n### NodeJS native bindings to libopus\n\nThis module implements bindings for Opus v1.1 for Node.js.\n\n```js\nvar opus = require('node-opus');\n\n// Create the encoder.\n// Specify 48kHz sampling rate and 10ms frame size.\n// NOTE: The decoder must use the same values when decoding the packets.\nvar rate = 48000;\nvar encoder = new opus.OpusEncoder( rate );\n\n// Encode and decode.\nvar frame_size = rate/100;\nvar encoded = encoder.encode( buffer, frame_size );\nvar decoded = encoder.decode( encoded, frame_size );\n\n// or create streams\nvar channels = 2;\nvar opusEncodeStream = new opus.Encoder(rate, channels, frame_size);\nvar opusDecodeStream = new opus.Decoder(rate, channels, frame_size);\n// see examples folder for a more complete example\n```\n\nPlatform support\n----------------\n\nSupported platforms:\n- Linux x64 & ia32\n- Linux ARM (Raspberry Pi 1 & 2)\n- Mac OS X x64\n- Windows x64\n\n\nAdd new supported platforms by running ./autogen.sh and ./configure in\ndeps/opus and copying the resulting config.h to deps/config/opus/[os]/[arch].\n\nUse the following flags with configure:\n\n    ./configure --enable-static --disable-shared --with-pic\n\nOn a clean debian-based system, the full flow looks approximately like:\n\n\tsudo apt-get update\n\tsudo apt-get install autoconf\n\tsudo apt-get install libtool\n\tcd deps/opus\n\t./autogen.sh\n\t./configure --enable-static --disable-shared --with-pic\n\tmkdir -p ../config/opus/[os]/[arch]\n\tcp config.h ../config/opus/[os]/[arch]\n\nAnd, then, the last step is to add the OS/Arch to `package.json`.\n",
  "readmeFilename": "README.md",
  "_id": "node-opus@0.2.6",
  "_from": "node-opus@^0.2.5"
}
